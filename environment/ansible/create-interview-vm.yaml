---
- name: Generate SSH keypair and deploy t2.micro Ubuntu instance in AWS
  hosts: localhost
  gather_facts: false

  vars:
    # AWS region where you'd like to operate
    aws_region: "us-east-1"
    aws_profile: "infra-ops-interview"

    # This should be a valid Ubuntu AMI in your region.
    # Example for Ubuntu 22.04 in us-east-1. Adjust as needed.
    ami_id: "ami-08c40ec9ead489470"

    # Customize these paths and key names if desired
    ssh_key_name: "interview"
    ssh_private_key_path: "./interview_{{ candidate }}_key"
    ssh_public_key_path: "./interview_{{ candidate }}_key.pub"

    # Instance specific vars
    instance_type: "t2.micro"
    instance_name: "interview-{{ candidate }}"
    # If you have a default VPC, you can omit subnet_id & security_group, or set them.
    # Example: "subnet-abc123"
    subnet_id: "subnet-0fb28f2b3a2d9890c"
    # Example: "sg-abc123"
    security_group_id: "sg-05295fd583d434816"
    remote_user: "ubuntu"
    remote_group: "ubuntu"

  tasks:
    - name: Create interview VM
      block:
        - name: Generate a new private key
          community.crypto.openssl_privatekey:
            path: "{{ ssh_private_key_path }}"
            size: 2048
            type: RSA
          register: privatekey_result

        - name: Generate the corresponding public key
          community.crypto.openssl_publickey:
            path: "{{ ssh_public_key_path }}"
            privatekey_path: "{{ ssh_private_key_path }}"
            format: "OpenSSH"
            force: true
          register: publickey_result

        - name: Set key material from publickey_result or from file
          set_fact:
            key_material: "{{ publickey_result.publickey | default(lookup('file', ssh_public_key_path)) }}"

        - name: Import or create Key Pair in AWS
          amazon.aws.ec2_key:
            name: "{{ ssh_key_name }}"
            region: "{{ aws_region }}"
            profile: "{{ aws_profile }}"
            key_material: "{{ key_material }}"
          register: aws_key_result

        - name: Launch a t2.micro Ubuntu instance
          amazon.aws.ec2_instance:
            region: "{{ aws_region }}"
            profile: "{{ aws_profile }}"
            image_id: "{{ ami_id }}"
            instance_type: "{{ instance_type }}"
            key_name: "{{ ssh_key_name }}"
            name: "{{ instance_name }}"
            network:
              # Only include subnet or security group if you need to specify them
              # for a non-default VPC or custom environment
              subnet_id: "{{ subnet_id if subnet_id else omit }}"
              groups: "{{ [security_group_id] if security_group_id else omit }}"
            wait: true
            wait_timeout: 500
          register: ec2_instance_result

        - name: Wait for SSH to become available on the new instance
          wait_for:
            host: "{{ ec2_instance_result.instances[0].public_ip_address }}"
            port: 22
            state: started
            delay: 15 # wait 15 seconds before first check
            timeout: 300

        - name: Add instance to in-memory inventory
          add_host:
            name: "{{ item.public_ip_address }}"
            groups: ec2_instances
            ansible_user: "{{ remote_user }}"
            ansible_ssh_private_key_file: "{{ ssh_private_key_path }}"
          loop: "{{ ec2_instance_result.instances }}"
          when: ec2_instance_result.instances is defined

        - name: Show instance Public IP information
          debug:
            msg: "{{ ec2_instance_result.instances.0.public_ip_address }}"

      tags:
        - never
        - create

    - name: Cleanup interview VM
      block:
        - name: Terminate the instance by Name tag
          amazon.aws.ec2_instance:
            region: "{{ aws_region }}"
            profile: "{{ aws_profile }}"
            filters:
              "tag:Name": "{{ instance_name }}" # Match instance to remove by name
            state: absent
            wait: true
            wait_timeout: 300
          register: terminate_result

        - name: Remove key pair from AWS
          amazon.aws.ec2_key:
            name: "{{ ssh_key_name }}"
            region: "{{ aws_region }}"
            profile: "{{ aws_profile }}"
            state: absent
          register: remove_key_result

        - name: Remove local private/public key files (optional)
          file:
            path: "{{ item }}"
            state: absent
          loop:
            - "{{ ssh_private_key_path }}"
            - "{{ ssh_public_key_path }}"
      tags:
        - never
        - cleanup
- name: Install and configure remote hosts
  hosts: ec2_instances
  become: true
  gather_facts: true
  vars:
    remote_user: "ubuntu"
    remote_group: "ubuntu"
  tags:
    - never
    - create
  tasks:
    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 3600

    - name: Install pip
      ansible.builtin.package:
        name: "{{ item }}"
        state: present
      loop:
        - python3
        - python3-pip
        - build-essential

    - name: Install ansible
      ansible.builtin.pip:
        name: ansible
        executable: pip3

    - name: Ensure ~/.local/bin is in the PATH for ubuntu user
      ansible.builtin.lineinfile:
        path: /home/ubuntu/.bashrc
        line: 'export PATH="$HOME/.local/bin:$PATH"'
        create: yes
        state: present

    - name: Set file ownership
      file:
        path: "/home/ubuntu/.bashrc"
        owner: "{{ remote_user }}"
        group: "{{ remote_group }}"
        mode: "0644"

    - name: Run ansible --version as ubuntu user
      become_user: ubuntu
      shell: ansible --version
      register: ansible_test

    - name: Debug show ansible --version output
      debug:
        var: ansible_test.stdout
